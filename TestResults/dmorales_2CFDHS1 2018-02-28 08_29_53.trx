<?xml version="1.0" encoding="UTF-8"?>
<TestRun id="963db8c8-6814-40a8-b168-09f824b05b39" name="dmorales@2CFDHS1 2018-02-28 08:29:53" runUser="NOVACOMP\dmorales" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <TestSettings name="Local" id="08daa5cd-975a-458b-9aa8-97caecb1c000">
    <Description>These are default test settings for a local test run.</Description>
    <Execution>
      <TestTypeSpecific />
      <AgentRule name="Execution Agents">
      </AgentRule>
    </Execution>
    <Deployment runDeploymentRoot="dmorales_2CFDHS1 2018-02-28 08_29_53" />
    <Properties>
      <Property name="TestSettingsUIType" value="LoadTest" />
    </Properties>
  </TestSettings>
  <Times creation="2018-02-28T08:29:53.3021680-06:00" queuing="2018-02-28T08:29:53.5605070-06:00" start="2018-02-28T08:29:53.7316298-06:00" finish="2018-02-28T08:29:59.5328837-06:00" />
  <ResultSummary outcome="Completed">
    <Counters total="1" error="0" failed="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" passed="0" completed="0" inProgress="0" pending="0" />
  </ResultSummary>
  <TestDefinitions>
    <WebTest name="WebTest1" storage="e:\users\dmorales\documents\visual studio 2015\projects\codeduitestproject2\webandloadtestproject1\webtest1.webtest" id="ce52c5be-b2c3-472c-bc59-73318cd1e4ec" persistedWebTest="">
      <Execution id="c9705675-f3d0-40d3-a873-064a0f541421" />
    </WebTest>
  </TestDefinitions>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <TestEntries>
    <TestEntry isTransparent="false" testId="ce52c5be-b2c3-472c-bc59-73318cd1e4ec" executionId="c9705675-f3d0-40d3-a873-064a0f541421" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <Results>
    <WebTestResult executionId="c9705675-f3d0-40d3-a873-064a0f541421" testId="ce52c5be-b2c3-472c-bc59-73318cd1e4ec" testName="WebTest1" computerName="2CFDHS1" duration="00:00:04.7136489" startTime="2018-02-28T08:29:53.8106889-06:00" testType="4e7599fa-5ecb-43e9-a887-cd63cf72d207" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c9705675-f3d0-40d3-a873-064a0f541421">
      <Output>
        <ErrorInfo>
          <Message>The test adapter 'WebTestAdapter' threw an exception while running test 'WebTest1'. Thread was being aborted.</Message>
        </ErrorInfo>
      </Output>
      <ResultFiles>
        <ResultFile path="WebTest1.webtestResult" />
      </ResultFiles>
      <TestSettings name="Local" id="08daa5cd-975a-458b-9aa8-97caecb1c000">
        <Description>These are default test settings for a local test run.</Description>
        <Execution>
          <TestTypeSpecific>
            <WebTestRunConfiguration testTypeId="4e7599fa-5ecb-43e9-a887-cd63cf72d207">
              <Browser name="Internet Explorer 9.0" MaxConnections="6">
                <Headers>
                  <Header name="User-Agent" value="Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0)" />
                  <Header name="Accept" value="*/*" />
                  <Header name="Accept-Language" value="{{$IEAcceptLanguage}}" />
                  <Header name="Accept-Encoding" value="GZIP" />
                </Headers>
              </Browser>
            </WebTestRunConfiguration>
          </TestTypeSpecific>
          <AgentRule name="Execution Agents">
          </AgentRule>
        </Execution>
        <Deployment runDeploymentRoot="dmorales_2CFDHS1 2018-02-28 08_29_53" />
        <Properties>
          <Property name="TestSettingsUIType" value="LoadTest" />
        </Properties>
      </TestSettings>
      <WebTestResultFilePath>dmorales_2CFDHS1 2018-02-28 08_29_53\In\c9705675-f3d0-40d3-a873-064a0f541421\WebTest1.webtestResult</WebTestResultFilePath>
    </WebTestResult>
  </Results>
</TestRun>